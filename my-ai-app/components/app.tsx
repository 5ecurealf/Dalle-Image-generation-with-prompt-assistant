"use client";

import { useState, useEffect } from "react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export function App() {
  const [theme, setTheme] = useState("");
  const [userInput, setUserInput] = useState("");
  const [refinedPrompt, setRefinedPrompt] = useState("");
  const [threadId, setThreadId] = useState("");

  // create a new threadID when chat component created
  useEffect(() => {
    const createThread = async () => {
      const res = await fetch(`/api/assistants/threads`, {
        method: "POST",
      });
      const data = await res.json();
      console.log("data.threadId", data.threadId);
      setThreadId(data.threadId);
    };
    createThread();
  }, []);

  const sendMessage = async (text: string) => {
    const response = await fetch(
      `/api/assistants/threads/${threadId}/messages`,
      {
        method: "POST",
        body: JSON.stringify({
          content: text,
        }),
      }
    );
    const data = await response.json();
    console.log("response from assistant", response);
    console.log("response data", data);

    console.log(
      "last message from the assistant",
      data[data.length - 1].content
    );

    // const stream = AssistantStream.fromReadableStream(response.body);
    // handleReadableStream(stream);
    setRefinedPrompt(data[data.length - 1].content);
  };

  const handleRefine = () => {
    const themeText = theme ? `In the style of ${theme}, ` : "";

    // refined will be the prompt generated by the assistant

    const promptToSendToAssistant = `${themeText}generate an image that fits the description: ${userInput}`;
    console.log(promptToSendToAssistant);
    sendMessage(promptToSendToAssistant);
    // Set this when we get feedback from the assistant
    // setRefinedPrompt();
  };

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-background">
      <div className="max-w-md w-full space-y-4">
        <div className="flex items-center space-x-2">
          {/* Radio Group */}
          <RadioGroup value={theme} onValueChange={setTheme}>
            <div className="flex items-center space-x-2">
              <RadioGroupItem id="theme-any" value="" />
              <Label htmlFor="theme-any">Any style</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem id="theme-realism" value="realism" />
              <Label htmlFor="theme-realism">Realism</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem id="theme-impressionism" value="impressionism" />
              <Label htmlFor="theme-impressionism">Impressionism</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem id="theme-surrealism" value="surrealism" />
              <Label htmlFor="theme-surrealism">Surrealism</Label>
            </div>
          </RadioGroup>
        </div>

        <div className="flex items-center space-x-2">
          <Input
            type="text"
            placeholder={`Enter a prompt for DALL-E 2 (${
              theme ? `in the style of ${theme}` : "any style"
            })`}
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            className="flex-1 rounded-md border border-input bg-background px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 focus:ring-primary"
          />
          <Button
            variant="outline"
            className="rounded-md px-4 py-2 text-sm font-medium"
            onClick={handleRefine}
          >
            Refine
          </Button>
          <Button className="rounded-md px-4 py-2 text-sm font-medium">
            Generate
          </Button>
        </div>

        <div className="bg-muted rounded-md p-4">
          <p className="text-sm text-muted-foreground">Refined prompt:</p>
          <p className="text-base font-medium">{refinedPrompt}</p>
        </div>
        <div className="bg-card rounded-md overflow-hidden">
          <img
            src="/placeholder.svg"
            alt="Generated image"
            width={600}
            height={400}
            className="w-full h-auto object-cover"
          />
        </div>
      </div>
    </div>
  );
}
